<?php

namespace StockXSync;

use WP_CLI;
use WC_Product_Variable;

if (!class_exists('\WP_CLI')) return;

class CLI_Sync {



    public static function register() {
        WP_CLI::add_command('stockx sync-all', [__CLASS__, 'sync_all_products']);
        WP_CLI::add_command('stockx sync-product', [__CLASS__, 'sync_single_product']);
        WP_CLI::add_command( 'stockx sync-single-product-women', [ __CLASS__, 'sync_single_product_women' ] );
        WP_CLI::add_command( 'stockx check-women', [ __CLASS__, 'check_women_checkbox' ] );
        WP_CLI::add_command( 'stockx sync-women', [ __CLASS__, 'sync_women_products' ] );
        WP_CLI::add_command('stockx parse-buynow', [__CLASS__, 'parse_products_buynow']);
        WP_CLI::add_command(
            'stockx sync-product-women',
            [ __CLASS__, 'sync_single_product_women' ],
            [
            'shortdesc' => 'Sync single variable product using Women sizes',
            'synopsis'  => [
                [
                'type'        => 'positional',
                'name'        => 'product_id',
                'description' => 'ID of the variable product',
                'optional'    => false,
                ],
            ],
            ]
        );

        WP_CLI::add_command(
                'stockx fetch-all',
                [ __CLASS__, 'cli_fetch_all_variations' ],
                [
                    'shortdesc' => 'Fetch all variation sizes & prices via StockX for a variable product',
                    'synopsis'  => [
                        [
                            'type'        => 'positional',
                            'name'        => 'product_id',
                            'description' => 'ID of the variable product',
                            'optional'    => false,
                            'repeats'     => false,
                        ],
                    ],
                ]
            );

    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ ‚ÄúBuy Now‚Äù —Ü—ñ–Ω–∏ –¥–ª—è –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞—Ü—ñ–π backorder/preorder –ø—Ä–æ–¥—É–∫—Ü—ñ—ó
     * –ü—Ä–æ–ø—É—Å–∫–∞—î —Ç–æ–≤–∞—Ä–∏ –∑ ID, —â–æ –≤–∫–∞–∑–∞–Ω—ñ —É $excluded_ids.
     * –ó–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ Selenium-–Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä–∞ (—è–∫ –±—É–ª–æ $client->get(...)),
     * –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –º–µ—Ç–æ–¥ $client->get_price($slug, $us_size).
     */

    public static function parse_products_buynow($args) {
        $excluded_ids = [
            19966, 20548, 20285,
            19229, 19228, 19227,
            8534,  8533, 21337,
        ];

        $last_product_id   = (int) get_option('stockx_sync_last_product', 0);
        $last_variation_id = (int) get_option('stockx_sync_last_variation', 0);
        $resuming_products = ($last_product_id > 0);

        $client   = new SeleniumClient();
        $size_map = require plugin_dir_path(__FILE__) . '../admin/size-mappings.php';
        $processed_variations = 0;

        $query = new \WP_Query([
            'post_type'      => 'product',
            'post_status'    => 'publish',
            'posts_per_page' => -1,
            'orderby'        => 'date',
            'order'          => 'DESC',
        ]);

        foreach ($query->posts as $product_post) {
            $product_id = $product_post->ID;

            if (in_array($product_id, $excluded_ids, true)) {
                WP_CLI::log("‚è≠Ô∏è Skipping excluded product ID {$product_id}");
                continue;
            }

            if ($resuming_products) {
                if ($product_id !== $last_product_id) {
                    continue;
                } else {
                    $resuming_products = false;
                }
            }

            update_option('stockx_sync_last_product', $product_id, false);

            $product = wc_get_product($product_id);
            if (!$product || !$product->is_type('variable')) {
                WP_CLI::log("‚è≠Ô∏è Skipping product ID {$product_id} (not variable)");
                continue;
            }

            $base_url = get_post_meta($product_id, '_stockx_product_base_url', true);
            if (!$base_url) {
                WP_CLI::log("‚è≠Ô∏è Skipping product ID {$product_id} (no base URL)");
                continue;
            }

            $slug = trim(parse_url($base_url, PHP_URL_PATH), '/');
            $variation_ids = $product->get_children();

            WP_CLI::log("üì¶ Processing product ID {$product_id} ({$slug}) with " . count($variation_ids) . " variations");

            $skip_variations = ($last_variation_id > 0 && get_option('stockx_sync_last_product') === $last_product_id);

            foreach ($variation_ids as $variation_id) {
                if ($skip_variations) {
                    if ($variation_id === $last_variation_id) {
                        $skip_variations = false;
                    }
                    continue;
                }

                update_option('stockx_sync_last_variation', $variation_id, false);

                $variation = wc_get_product($variation_id);
                if (!$variation) {
                    continue;
                }

                $is_preorder  = get_post_meta($variation_id, '_is_preorder', true);
                $is_backorder = $variation->is_on_backorder();
                if (!$is_preorder && !$is_backorder) {
                    WP_CLI::log("‚è≠Ô∏è Variation {$variation_id} skipped (in-stock)");
                    continue;
                }

                // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 1) –í–∏–∑–Ω–∞—á–∞—î–º–æ EU-—Ä–æ–∑–º—ñ—Ä —Ç–∞ –∫–ª—é—á –∞—Ç—Ä–∏–±—É—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                $eu_size  = '';
                $attr_key = '';
                foreach ($variation->get_attributes() as $key => $value) {
                    if (strpos($key, 'size') !== false && $value) {
                        $eu_size  = $value;        // –Ω–∞–ø—Ä.: ‚Äú44‚Äù
                        $attr_key = $key;          // –Ω–∞–ø—Ä.: ‚Äúattribute_pa_jordaneu‚Äù
                        break;
                    }
                }
                if (!$eu_size) {
                    foreach ($variation->get_attributes() as $key => $value) {
                        $clean_key = str_replace('attribute_', '', $key);
                        if ($value = $variation->get_attribute($clean_key)) {
                            $eu_size  = $value;
                            $attr_key = $key;
                            break;
                        }
                    }
                }
                if (!$eu_size) {
                    WP_CLI::log("‚ùå Variation {$variation_id} has no size, skipping");
                    continue;
                }

                // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 2) –ú–∞–ø–∏–º–æ EU ‚Üí US –∞–±–æ –±–µ—Ä–µ–º–æ EU, —è–∫—â–æ –º–∞–ø–∏ –Ω–µ–º–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                $us_size = $eu_size;
                if (
                    !empty($attr_key)
                    && isset($size_map[$attr_key])
                    && isset($size_map[$attr_key][$eu_size])
                    && isset($size_map[$attr_key][$eu_size]['US'])
                ) {
                    $us_raw   = $size_map[$attr_key][$eu_size]['US']; // ‚ÄúUS 10‚Äù
                    $us_size  = trim(str_replace('US ', '', $us_raw)); // ‚Äú10‚Äù
                }

                // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3) –§–æ—Ä–º—É—î–º–æ ‚ÄúBuy Now‚Äù URL ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                $full_url = "https://stockx.com/buy/{$slug}?size=" . urlencode($us_size) . "&defaultBuy=true";

                WP_CLI::log("üîç Getting Buy Now price for variation {$variation_id} (EU: {$eu_size}, US: {$us_size})");
                WP_CLI::log("   URL: {$full_url}");

                try {
                    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 4) –í–∏–∫–ª–∏–∫–∞—î–º–æ navigateTo() –∑–∞–º—ñ—Å—Ç—å $client->driver->get() ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                    $client->navigateTo($full_url);

                    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 5) –ß–µ–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É-–∞–∫–∫–æ—Ä–¥–µ–æ–Ω ‚ÄúSubtotal‚Äù —ñ –∫–ª—ñ–∫–∞—î–º–æ —ó—ó ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                    $accordion_xpath = '//p[normalize-space(text())="Subtotal"]/ancestor::button';
                    $client->waitFor('xpath', $accordion_xpath, 10000);
                    $client->find('xpath', $accordion_xpath)->click();

                    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 6) –ß–µ–∫–∞—î–º–æ ‚ÄúSubtotal‚Äù —É —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ–º—É –±–ª–æ—Ü—ñ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                    $subtotal_xpath = '
                        //div[@data-component="item-row"]
                          //div[text()="Subtotal"]
                          /following-sibling::div//*[@data-testid="bid-total"]//*[name()="span"]
                    ';
                    $client->waitFor('xpath', $subtotal_xpath, 10000);
                    $price_text = $client->find('xpath', $subtotal_xpath)->getText();

                    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ $ —ñ –∫–æ–º–∏, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ float
                    $basePrice = floatval(str_replace(['$', ','], '', $price_text));

                    if ($basePrice <= 0) {
                        WP_CLI::warning("‚ö†Ô∏è No valid ‚ÄúSubtotal‚Äù found for variation {$variation_id}");
                        $variation->set_price('');
                        $variation->set_regular_price('');
                        $variation->set_stock_status('outofstock');
                        $variation->save();

                        WP_CLI::log("‚õî Variation {$variation_id} set to out-of-stock (no subtotal)");
                        continue;
                    }

                    self::log("üî¢ Raw ‚ÄúSubtotal‚Äù price: \${$basePrice}");

                    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 7) –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Ü—ñ–Ω–∫—É (Subtotal –≤–∂–µ –≤–∫–ª—é—á–∞—î –≤—Å—ñ –∑–±–æ—Ä–∏) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                    if ($basePrice < 1000) {
                        $markup_factor = 1.5;
                    } elseif ($basePrice <= 3000) {
                        $markup_factor = 1.3;
                    } else {
                        $markup_factor = 1.1;
                    }
                    $finalPrice = round($basePrice * $markup_factor, 2);
                    self::log("üí≤ After markup (√ó{$markup_factor}): \${$finalPrice}");

                    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 8) –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É —É WooCommerce ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                    $variation->set_price($finalPrice);
                    $variation->set_regular_price($finalPrice);
                    $variation->set_catalog_visibility('visible');
                    $variation->save();

                    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 9) –ó–∞–ø–∏—Å—É—î–º–æ –º–µ—Ç–∞-–ø–æ–ª—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                    update_post_meta($variation_id, '_stockx_product_url',    $full_url);
                    update_post_meta($variation_id, '_stockx_price_synced_at', current_time('mysql'));
                    update_post_meta($product_id,    '_stockx_last_cli_sync',  current_time('mysql'));

                    // ==== –í–Ü–î–ü–†–ê–í–ö–ê –í GOOGLE SHEET ====
                    $data = [
                        'product_id'    => $product_id,
                        'variation_id'  => $variation_id,
                        'price'         => $price,
                        'synced_at'     => current_time('mysql'),
                    ];

                    $response = wp_remote_post('https://script.google.com/macros/s/AKfycbyT-dAT7-P66SWOfcoM22YhbmEhL12PYsOvKOGNEzi4rF8tBcviH134fMwb664ea22U/exec', [
                        'method'  => 'POST',
                        'timeout' => 10,
                        'headers' => [
                            'Content-Type' => 'application/json',
                        ],
                        'body' => json_encode($data),
                    ]);

                    if (is_wp_error($response)) {
                        WP_CLI::warning("‚ùå Webhook error: " . $response->get_error_message());
                    } else {
                        WP_CLI::log("üì§ Sent to Google Sheet: " . wp_remote_retrieve_body($response));
                    }

                    WP_CLI::success("‚úÖ Variation {$variation_id} synced: final price \${$finalPrice}");
                    $processed_variations++;

                } catch (\Throwable $e) {
                    WP_CLI::warning("‚ö†Ô∏è Variation {$variation_id} error: " . $e->getMessage());
                    continue;
                }

                // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 10) –ó–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                $delay = rand(5, 10);
                WP_CLI::log("‚è≥ Sleeping {$delay}s‚Ä¶");
                sleep($delay);
            }

            // –û—á–∏—â–∞—î–º–æ —á–µ–∫–ø–æ—ñ–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ–π –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
            delete_option('stockx_sync_last_variation');
        }

        // –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —á–µ–∫–ø–æ—ñ–Ω—Ç–∏
        delete_option('stockx_sync_last_product');
        delete_option('stockx_sync_last_variation');

        WP_CLI::success("üèÅ Buy Now parsing complete: {$processed_variations} variations processed.");
    }

    // –Ñ–¥–∏–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç–æ–¥—É log()
    protected static function log(string $msg) {
        WP_CLI::log($msg);
    }
    
public static function sync_all_products() {
    // –ú–∞—Å–∏–≤ ID –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
    $excluded_ids = [
        19966,
        20548,
        20285,
        19229,
        19228,
        19227,
        8534,
        8533,
        21337,
    ];

    // 1) –ó—á–∏—Ç—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —á–µ–∫–ø–æ—ñ–Ω—Ç–∏
    $last_product_id   = (int) get_option('stockx_sync_last_product', 0);
    $last_variation_id = (int) get_option('stockx_sync_last_variation', 0);
    $resuming_products = $last_product_id > 0;

    $client   = new SeleniumClient();
    $size_map = require plugin_dir_path(__FILE__) . '../admin/size-mappings.php';
    $processed_variations = 0;

    // 2) –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
    $query = new \WP_Query([
        'post_type'      => 'product',
        'post_status'    => 'publish',
        'posts_per_page' => -1,
        'orderby'        => 'date',   // —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é
        'order'          => 'DESC',   // –≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö
    ]);

    foreach ($query->posts as $product_post) {
        $product_id = $product_post->ID;

        // –Ø–∫—â–æ —Ü–µ–π ID —É —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
        if (in_array($product_id, $excluded_ids, true)) {
            WP_CLI::log("‚è≠Ô∏è Skipping excluded product ID {$product_id}");
            continue;
        }

        // 3) –Ø–∫—â–æ —Ä–µ–∑—é–º–∏–º–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ, –¥–æ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–º–æ –º—ñ—Å—Ü–µ –∑—É–ø–∏–Ω–∫–∏
        if ($resuming_products) {
            if ($product_id !== $last_product_id) {
                continue;
            } else {
                // –∑–Ω–∞–π—à–ª–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä ‚Äî –Ω–∞—Å—Ç—É–ø–Ω—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ
                $resuming_products = false;
            }
        }

        // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–æ–≤–∞—Ä —è–∫ —á–µ–∫–ø–æ—ñ–Ω—Ç
        update_option('stockx_sync_last_product', $product_id, false);

        $product = wc_get_product($product_id);
        if (!$product || !$product->is_type('variable')) {
            WP_CLI::log("‚è≠Ô∏è Skipping product ID {$product_id} (not variable)");
            continue;
        }

        $base_url = get_post_meta($product_id, '_stockx_product_base_url', true);
        if (!$base_url) {
            WP_CLI::log("‚è≠Ô∏è Skipping product ID {$product_id} (no base URL)");
            continue;
        }

        $slug = trim(parse_url($base_url, PHP_URL_PATH), '/');
        $variation_ids = $product->get_children();

        WP_CLI::log("üì¶ Processing product ID {$product_id} with " . count($variation_ids) . " variations");

        // 4) –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ç—Ä–µ–±–∞ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –≤–∞—Ä—ñ–∞—Ü—ñ—ó –¥–æ last_variation
        $skip_variations = $last_variation_id > 0 && get_option('stockx_sync_last_product') == $last_product_id;

        foreach ($variation_ids as $variation_id) {
            // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ, –¥–æ–∫–∏ –Ω–µ –∑—É—Å—Ç—Ä—ñ–Ω–µ–º–æ last_variation
            if ($skip_variations) {
                if ($variation_id === $last_variation_id) {
                    $skip_variations = false; // –ø–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö
                }
                continue;
            }

            // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ–∫–ø–æ—ñ–Ω—Ç –Ω–∞ —Ä—ñ–≤–Ω—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó
            update_option('stockx_sync_last_variation', $variation_id, false);

            $variation = wc_get_product($variation_id);
            if (!$variation) {
                continue;
            }

            // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–º–æ —Ç—ñ–ª—å–∫–∏ backorder/preorder
            $is_preorder   = get_post_meta($variation_id, '_is_preorder', true);
            $is_backorder  = $variation->is_on_backorder();
            if (! $is_preorder && ! $is_backorder) {
                WP_CLI::log("‚è≠Ô∏è Variation {$variation_id} skipped (in-stock)");
                continue;
            }

            // –¥–µ—Ç–µ–∫—Ç–∏–º–æ —Ä–æ–∑–º—ñ—Ä
            $size = '';
            foreach ($variation->get_attributes() as $key => $value) {
                if (strpos($key, 'size') !== false && $value) {
                    $size = $value; break;
                }
            }
            if (! $size) {
                foreach ($variation->get_attributes() as $key => $value) {
                    $attr_key = str_replace('attribute_', '', $key);
                    if ($value = $variation->get_attribute($attr_key)) {
                        $size = $value; break;
                    }
                }
            }
            if (! $size) {
                WP_CLI::log("‚ùå Variation {$variation_id} has no size, skipping");
                continue;
            }

            // –≥–æ—Ç—É—î–º–æ URL
            $us_size = $size_map[$size]['US Size'] ?? $size;
            $full_url = "https://stockx.com/{$slug}?catchallFilters={$slug}&size=" . urlencode($us_size);

            // –æ—Ç—Ä–∏–º—É—î–º–æ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É
            try {
                WP_CLI::log("üîç Getting price for variation {$variation_id} (EU: {$size})");
                $price = floatval($client->get_price($slug, $us_size));

                if (! $price) {
                    WP_CLI::warning("‚ö†Ô∏è No price for variation {$variation_id}");
                    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ü—ñ–Ω—É —Ç–∞ —Å—Ç–∞–≤–∏–º–æ out-of-stock
                    $variation->set_price('');
                    $variation->set_regular_price('');
                    $variation->set_stock_status('outofstock');
                    $variation->save();

                    WP_CLI::log("‚õî Variation {$variation_id} set to out-of-stock (no price found)");
                    continue;
                }

                $variation->set_price($price);
                $variation->set_regular_price($price);
                $variation->set_catalog_visibility('visible');
                $variation->save();
                update_post_meta($variation_id, '_stockx_product_url', $full_url);
                update_post_meta($variation_id, '_stockx_price_synced_at', current_time('mysql') );
                update_post_meta( $product_id, '_stockx_last_cli_sync', current_time( 'mysql' ) );

                
                $data = [
                    'product_id'    => $product_id,
                    'variation_id'  => $variation_id,
                    'price'         => $price,
                    'synced_at'     => current_time('mysql'),
                ];

                $response = wp_remote_post('https://script.google.com/macros/s/AKfycbyT-dAT7-P66SWOfcoM22YhbmEhL12PYsOvKOGNEzi4rF8tBcviH134fMwb664ea22U/exec', [
                    'method'  => 'POST',
                    'timeout' => 10,
                    'headers' => [ 'Content-Type' => 'application/json' ],
                    'body'    => json_encode($data),
                ]);

                if (is_wp_error($response)) {
                    WP_CLI::warning("‚ùå Webhook error: " . $response->get_error_message());
                } else {
                    WP_CLI::log("üì§ Sent to Google Sheet: " . wp_remote_retrieve_body($response));
                }

                $synced_at = get_post_meta( $variation_id, '_stockx_price_synced_at', true );
                if ( $synced_at ) {
                    echo "–¶—ñ–Ω–∞ –≤–∑—è—Ç–∞ –∑—ñ StockX (–æ—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: $synced_at)";
                } else {
                    echo "–¶—ñ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É";
                }

                WP_CLI::log("‚úÖ Price {$price} set for variation {$variation_id}");
                $processed_variations++;

            } catch (\Throwable $e) {
                WP_CLI::warning("‚ö†Ô∏è Variation {$variation_id} error: " . $e->getMessage());
                continue;
            }

            // –Ω–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
            $delay = rand( 5, 10 );
            WP_CLI::log( "‚è≥ Sleeping {$delay}s‚Ä¶" );
            sleep( $delay );
        }

        // 5) –ü—ñ—Å–ª—è –ø—Ä–æ–¥—É–∫—Ç—É –æ—á–∏—â–∞—î–º–æ —á–µ–∫–ø–æ—ñ–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ–π
        delete_option('stockx_sync_last_variation');
    }

    // 6) –ü—ñ—Å–ª—è –≤—Å—ñ—Ö ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ —á–µ–∫–ø–æ—ñ–Ω—Ç–∏
    delete_option('stockx_sync_last_product');
    delete_option('stockx_sync_last_variation');

    WP_CLI::success("üèÅ Sync complete: {$processed_variations} variations processed.");
}

/**
 * WP-CLI: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º —Ñ–ª–∞–≥–æ–º ¬´Women Sizes¬ª
 */
public static function sync_women_products() {
    // –ó—á–∏—Ç—É—î–º–æ –∫–∞—Ä—Ç—É —Ä–æ–∑–º—ñ—Ä—ñ–≤
    $size_map = require plugin_dir_path( __FILE__ ) . '../admin/size-mappings.php';

    // –®—É–∫–∞—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ _stockx_is_women = 'yes'
    $query = new \WP_Query([
        'post_type'      => 'product',
        'posts_per_page' => -1,
        'meta_key'       => '_stockx_is_women',
        'meta_value'     => 'yes',
    ]);

    if ( empty( $query->posts ) ) {
        WP_CLI::log( 'üîç –¢–æ–≤–∞—Ä–∏ –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é Women Sizes –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' );
        return;
    }

    $processed = 0;

    foreach ( $query->posts as $post ) {
        $product = wc_get_product( $post->ID );

        if ( ! $product || ! $product->is_type( 'variable' ) ) {
            WP_CLI::warning( "‚è≠Ô∏è Product ID {$post->ID} –Ω–µ —î –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–∏–º." );
            continue;
        }

        $base_url = get_post_meta( $post->ID, '_stockx_product_base_url', true );
        if ( ! $base_url ) {
            WP_CLI::warning( "‚ö†Ô∏è Product ID {$post->ID} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –±–∞–∑–æ–≤–∏–π URL." );
            continue;
        }

        $slug = trim( parse_url( $base_url, PHP_URL_PATH ), '/' );

        foreach ( $product->get_children() as $vid ) {
            $variation = wc_get_product( $vid );
            if ( ! $variation ) {
                WP_CLI::warning( "‚ö†Ô∏è –í–∞—Ä—ñ–∞—Ü—ñ—è {$vid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞." );
                continue;
            }

            // –í–∏—Ç—è–≥—É—î–º–æ EU-—Ä–æ–∑–º—ñ—Ä
            $size = '';
            foreach ( $variation->get_attributes() as $attr_key => $attr_val ) {
                if ( strpos( $attr_key, 'size' ) !== false && $attr_val ) {
                    $size = $attr_val;
                    break;
                }
            }

            if ( ! $size ) {
                WP_CLI::warning( "‚ö†Ô∏è –†–æ–∑–º—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ—ó {$vid}." );
                continue;
            }

            // –ú–∞–ø–∏–º–æ –≤ US Size —Ç–∞ –¥–æ–¥–∞—î–º–æ 'W'
            $us = $size_map[ $size ]['US Size'] ?? $size;
            if ( strpos( $us, 'W' ) === false ) {
                $us .= 'W';
            }

            WP_CLI::log( "üîç –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ—ó {$vid} (US: {$us})‚Ä¶" );

            try {
                $client = new SeleniumClient();
                $price  = floatval( $client->get_price( $slug, $us ) );

                if ( ! $price ) {
                    WP_CLI::warning( "‚ö†Ô∏è –¶—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ—ó {$vid}." );
                    continue;
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é
                $variation->set_price( $price );
                $variation->set_regular_price( $price );
                $variation->save();

                WP_CLI::log( "‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ü—ñ–Ω—É {$price} –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ—ó {$vid}." );
                $processed++;

            } catch ( \Throwable $e ) {
                WP_CLI::warning( "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ—ó {$vid}: " . $e->getMessage() );
            }
        }
    }

    WP_CLI::success( "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —Ü—ñ–Ω–∏ –¥–ª—è {$processed} –≤–∞—Ä—ñ–∞—Ü—ñ–π." );
}


    // for all products
    // public static function sync_all_products() {
        
    //     $client = new SeleniumClient();
    //     $size_map = require plugin_dir_path(__FILE__) . '../admin/size-mappings.php';
    //     $processed_variations = 0;

    //     $query = new \WP_Query([
    //         'post_type'      => 'product',
    //         'post_status'    => 'publish',
    //         'posts_per_page' => -1,
    //         'orderby'        => 'date',   // —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é
    //         'order'          => 'DESC',   // –≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö
    //     ]);

    //     // $query = new \WP_Query([
    //     //     'post_type'      => 'product',
    //     //     'post_status'    => 'publish',
    //     //     'posts_per_page' => -1,
    //     //     'orderby'        => 'date',
    //     //     'order'          => 'DESC',
    //     //     'tax_query'      => [
    //     //         [
    //     //             'taxonomy'         => 'product_cat',
    //     //             'field'            => 'term_id',
    //     //             'terms'            => [619], // üëà —Ç—ñ–ª—å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è ID 58
    //     //             'include_children' => true,
    //     //             'operator'         => 'IN',
    //     //         ],
    //     //     ],
    //     // ]);



    //     $total_products = count($query->posts);
    //     $current_product_index = 0;
    //     $total_variations = 0;
    //     $processed_variations = 0;
    //     $start_time = microtime(true);

    //     foreach ($query->posts as $product_post) {
    //         $current_product_index++;
    //         $product = wc_get_product($product_post->ID);
    //         if (!$product || !$product->is_type('variable')) continue;

    //         $base_url = get_post_meta($product->get_id(), '_stockx_product_base_url', true);
    //         if (!$base_url) {
    //             WP_CLI::log("‚è≠Ô∏è Skipping product ID {$product->get_id()} (no StockX base URL)");
    //             continue;
    //         }

    //         $variation_ids = $product->get_children();
    //         $total_variations += count($variation_ids);

    //         WP_CLI::log("üì¶ Product {$current_product_index} / {$total_products} (ID: {$product->get_id()})");

    //         $slug = trim(parse_url($base_url, PHP_URL_PATH), '/');

    //         // for product with equal price for all variations
    //         foreach ($variation_ids as $variation_id) {
    //             $processed_variations++;

    //             $elapsed = microtime(true) - $start_time;
    //             $avg_time = $elapsed / max($processed_variations, 1);
    //             $remaining = $total_variations - $processed_variations;
    //             $eta = gmdate('i:s', (int) round($avg_time * $remaining));

    //             WP_CLI::log("üëü Variation {$processed_variations} / {$total_variations} ‚è±Ô∏è ETA: {$eta} ‚åõ Avg: " . round($avg_time, 1) . "s");

    //             $variation = wc_get_product($variation_id);
    //             if (!$variation) continue;
    //             // ‚úÖ Only sync if backorder or preorder
    //             $is_preorder = get_post_meta($variation_id, '_is_preorder', true);
    //             $is_backorder = $variation->is_on_backorder();

    //             if (!$is_preorder && !$is_backorder) {
    //                 WP_CLI::log("‚è≠Ô∏è Variation {$variation_id} is not preorder or backorder, skipping.");
    //                 continue;
    //             }

    //             // ‚úÖ STEP 1: Detect size
    //             $size = '';
    //             foreach ($variation->get_attributes() as $key => $value) {
    //                 if (empty($size) && strpos($key, 'size') !== false && !empty($value)) {
    //                     $size = $value;
    //                 }
    //             }

    //             if (empty($size)) {
    //                 foreach ($variation->get_attributes() as $key => $value) {
    //                     $attr_key = str_replace('attribute_', '', $key);
    //                     $size = $variation->get_attribute($attr_key);
    //                     if (!empty($size)) break;
    //                 }
    //             }

    //             if (!$size) {
    //                 WP_CLI::log("‚ùå Variation $variation_id has no size, skipping");
    //                 continue;
    //             }

    //             // ‚úÖ STEP 2: Map to US size and prepare URL
    //             $us_size = $size_map[$size]['US Size'] ?? $size;
    //             $full_url = "https://stockx.com/{$slug}?catchallFilters={$slug}&size=" . urlencode($us_size);

    //             // ‚úÖ STEP 3: Compare and maybe update price
    //             $existing_price = floatval($variation->get_price());

                
    //             try {
    //                 WP_CLI::log("üîç Getting price for variation {$variation_id} (EU: {$size})");
    //                 $price = floatval($client->get_price($slug, $us_size));

    //                 if (!$price || !is_numeric($price)) {
    //                     WP_CLI::warning("‚ö†Ô∏è No price for variation {$variation_id}");

    //                     // üîª –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—É —Ü—ñ–Ω—É, —è–∫—â–æ —î
    //                     if ($variation->get_price()) {
    //                         $variation->set_price('');
    //                         $variation->set_regular_price('');
    //                         $variation->set_catalog_visibility('hidden');
    //                         $variation->save();
    //                         WP_CLI::log("‚ùå Removed old price and hid variation {$variation_id}");
    //                     }

    //                     continue;
    //                 }

    //                 $variation->set_price($price);
    //                 $variation->set_regular_price($price);
    //                 $variation->set_catalog_visibility('visible');
    //                 $variation->save();

    //                 update_post_meta($variation_id, '_stockx_product_url', $full_url);
                    

    //                 WP_CLI::log("‚úÖ Price {$price} UAH set for variation {$variation_id}");
    //                 $processed_variations++;

    //             } catch (\Throwable $e) {
    //                 WP_CLI::warning("‚ö†Ô∏è Variation {$variation_id} error: " . $e->getMessage());
    //                 continue;
    //             }

    //             $delay = rand(10, 20);
    //             WP_CLI::log("‚è≥ Sleeping for {$delay}s...");
    //             sleep($delay);
    //         }

    //         // for all variations with different prices
    //         // foreach ($variation_ids as $variation_id) {
    //         //     $processed_variations++;

    //         //     $elapsed = microtime(true) - $start_time;
    //         //     $avg_time = $elapsed / max($processed_variations, 1);
    //         //     $remaining = $total_variations - $processed_variations;
    //         //     $eta = gmdate('i:s', (int) round($avg_time * $remaining));

    //         //     WP_CLI::log("üëü Variation {$processed_variations} / {$total_variations} ‚è±Ô∏è ETA: {$eta} ‚åõ Avg: " . round($avg_time, 1) . "s");


    //         //     $variation = wc_get_product($variation_id);
    //         //     if (!$variation) continue;

    //         //         $existing_price = floatval($variation->get_price());

    //         //         try {
    //         //             WP_CLI::log("üîç –û—Ç—Ä–∏–º—É—é —Ü—ñ–Ω—É –¥–ª—è variation {$variation_id} (EU: {$size})");

    //         //             $price = $client->get_price($slug, $us_size);
    //         //             $price = floatval($price);

    //         //             if (!$price || !is_numeric($price)) {
    //         //                 WP_CLI::warning("‚ö†Ô∏è –ù–µ–º–∞—î —Ü—ñ–Ω–∏ –¥–ª—è variation {$variation_id}");
    //         //                 continue;
    //         //             }

    //         //             if (abs($existing_price - $price) < 0.01) {
    //         //                 WP_CLI::log("‚è≠Ô∏è Variation {$variation_id} already has correct price ({$existing_price}), skipping");
    //         //                 continue;
    //         //             }

    //         //             $variation->set_price($price);
    //         //             $variation->set_regular_price($price);
    //         //             $variation->save();

    //         //             update_post_meta($variation_id, '_stockx_product_url', $full_url);

    //         //             WP_CLI::log("‚úÖ –¶—ñ–Ω–∞ {$price} UAH –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è variation {$variation_id}");
    //         //         } catch (\Throwable $e) {
    //         //             WP_CLI::warning("‚ö†Ô∏è Variation {$variation_id} skipped due to error: " . $e->getMessage());
    //         //             continue;
    //         //         }


    //         //     $size = '';
    //         //     foreach ($variation->get_attributes() as $key => $value) {
    //         //         if (empty($size) && strpos($key, 'size') !== false && !empty($value)) {
    //         //             $size = $value;
    //         //         }
    //         //     }

    //         //     if (empty($size)) {
    //         //         foreach ($variation->get_attributes() as $key => $value) {
    //         //             $attr_key = str_replace('attribute_', '', $key);
    //         //             $size = $variation->get_attribute($attr_key);
    //         //             if (!empty($size)) break;
    //         //         }
    //         //     }

    //         //     if (!$size) {
    //         //         WP_CLI::log("‚ùå Variation $variation_id has no size, skipping");
    //         //         continue;
    //         //     }

    //         //     $us_size = $size_map[$size]['US Size'] ?? $size;
    //         //     $full_url = "https://stockx.com/{$slug}?catchallFilters={$slug}&size=" . urlencode($us_size);

    //         //     try {
    //         //         WP_CLI::log("üîç –û—Ç—Ä–∏–º—É—é —Ü—ñ–Ω—É –¥–ª—è variation {$variation_id} (EU: {$size})");

    //         //         $price = $client->get_price($slug, $us_size);

    //         //         if ($price && is_numeric($price)) {
    //         //             $variation->set_price($price);
    //         //             $variation->set_regular_price($price);
    //         //             $variation->save();

    //         //             update_post_meta($variation_id, '_stockx_product_url', $full_url);

    //         //             WP_CLI::log("‚úÖ –¶—ñ–Ω–∞ {$price} UAH –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è variation {$variation_id}");
    //         //         } else {
    //         //             WP_CLI::warning("‚ö†Ô∏è –ù–µ–º–∞—î —Ü—ñ–Ω–∏ –¥–ª—è variation {$variation_id}");
    //         //         }
    //         //     } catch (\Throwable $e) {
    //         //         WP_CLI::warning("‚ö†Ô∏è Variation {$variation_id} skipped due to error: " . $e->getMessage());
    //         //         continue;
    //         //     }

    //         //     $delay = rand(10, 20);
    //         //     WP_CLI::log("‚è≥ Sleeping for {$delay}s...");
    //         //     sleep($delay);
    //         // }
    //     }

    //     $total_time = round(microtime(true) - $start_time);
    //     WP_CLI::success("‚úÖ Done: {$current_product_index} products, {$processed_variations} variations in {$total_time}s.");
    // }


    // for single product (multiply)
    public static function sync_single_product($args) {
        if (empty($args)) {
            WP_CLI::error("‚ùå Please provide at least one product ID.");
            return;
        }

        $client = new SeleniumClient();
        $size_map = require plugin_dir_path(__FILE__) . '../admin/size-mappings.php';
        $processed_variations = 0;

        foreach ($args as $product_id_raw) {
            $product_id = intval($product_id_raw);
            $product = wc_get_product($product_id);

            if (!$product || !$product->is_type('variable')) {
                WP_CLI::warning("‚è≠Ô∏è Product ID {$product_id} is not a variable product or not found.");
                continue;
            }

            $variation_ids = $product->get_children();
            $slug = trim(parse_url(get_post_meta($product->get_id(), '_stockx_product_base_url', true), PHP_URL_PATH), '/');
            if (!$slug) {
                WP_CLI::warning("‚è≠Ô∏è No StockX base URL found for product ID {$product_id}");
                continue;
            }

            WP_CLI::log("üì¶ Syncing product ID {$product_id} with " . count($variation_ids) . " variations...");

            foreach ($variation_ids as $variation_id) {
                $variation = wc_get_product($variation_id);
                if (!$variation) continue;
                // ‚úÖ Only sync if backorder or preorder
                $is_preorder = get_post_meta($variation_id, '_is_preorder', true);
                $is_backorder = $variation->is_on_backorder();

                if (!$is_preorder && !$is_backorder) {
                    WP_CLI::log("‚è≠Ô∏è Variation {$variation_id} is not preorder or backorder, skipping.");
                    continue;
                }

                // Step 1: Get size
                $size = '';
                foreach ($variation->get_attributes() as $key => $value) {
                    if (empty($size) && strpos($key, 'size') !== false && !empty($value)) {
                        $size = $value;
                    }
                }
                if (empty($size)) {
                    foreach ($variation->get_attributes() as $key => $value) {
                        $attr_key = str_replace('attribute_', '', $key);
                        $size = $variation->get_attribute($attr_key);
                        if (!empty($size)) break;
                    }
                }

                if (!$size) {
                    WP_CLI::log("‚ùå Variation $variation_id has no size, skipping");
                    continue;
                }

                // Step 2: Prepare URL
                $us_size = $size_map[$size]['US Size'] ?? $size;
                $full_url = "https://stockx.com/{$slug}?catchallFilters={$slug}&size=" . urlencode($us_size);


                // Step 3: Sync price
                try {
                    WP_CLI::log("üîç Getting price for variation {$variation_id} (EU: {$size})");
                    $price = floatval($client->get_price($slug, $us_size));
                    
                    if (! $price) {
                        WP_CLI::warning("‚ö†Ô∏è No price for variation {$variation_id}");
                        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ü—ñ–Ω—É —Ç–∞ —Å—Ç–∞–≤–∏–º–æ out-of-stock
                        $variation->set_price('');
                        $variation->set_regular_price('');
                        $variation->set_stock_status('outofstock');
                        $variation->save();

                        WP_CLI::log("‚õî Variation {$variation_id} set to out-of-stock (no price found)");
                        continue;
                    }


                    $variation->set_price($price);
                    $variation->set_regular_price($price);
                    $variation->set_catalog_visibility('visible');
                    $variation->save();

                    update_post_meta($variation_id, '_stockx_product_url', $full_url);
                    update_post_meta($variation_id, '_stockx_price_synced_at', current_time('mysql') );
                    $synced_at = get_post_meta( $variation_id, '_stockx_price_synced_at', true );
                    if ( $synced_at ) {
                        echo "–¶—ñ–Ω–∞ –≤–∑—è—Ç–∞ –∑—ñ StockX (–æ—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: $synced_at)";
                    } else {
                        echo "–¶—ñ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É";
                    }

                    WP_CLI::log("‚úÖ Price {$price} UAH set for variation {$variation_id}");
                    $processed_variations++;

                } catch (\Throwable $e) {
                    WP_CLI::warning("‚ö†Ô∏è Variation {$variation_id} error: " . $e->getMessage());
                    continue;
                }


                $delay = rand(10, 20);
                WP_CLI::log("‚è≥ Sleeping for {$delay}s...");
                sleep($delay);
            }

            WP_CLI::success("‚úÖ Finished product ID {$product_id}");
        }

        WP_CLI::success("üèÅ All requested products processed.");
    }
    /**
 * WP-CLI: Sync single variable product, but using Women sizes (US_W_Size)
 *
 * Usage: wp stockx sync-product-women <PRODUCT_ID> --allow-root
 */

public static function sync_single_product_women( $args ) {
    if ( empty( $args ) ) {
        WP_CLI::error( "‚ùå Please provide at least one product ID." );
    }

    // –°–ø–∏—Å–æ–∫ ID –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
    $allowed_ids = [
        19966,
        20548,
        20285,
        19229,
        19228,
        19227,
        8534,
        8533,
        21337,
    ];

    $client   = new SeleniumClient();
    $size_map = require plugin_dir_path( __FILE__ ) . '../admin/size-mappings.php';
    $processed = 0;

    foreach ( $args as $raw ) {
        $product_id = absint( $raw );

        // –Ø–∫—â–æ ID –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        if ( ! in_array( $product_id, $allowed_ids, true ) ) {
            WP_CLI::log( "‚è≠Ô∏è Skipping product {$product_id} (not in allowed list)" );
            continue;
        }

        $product = wc_get_product( $product_id );
        if ( ! $product || ! $product->is_type( 'variable' ) ) {
            WP_CLI::warning( "‚è≠Ô∏è Product ID {$product_id} is not a variable product." );
            continue;
        }

        $variation_ids = $product->get_children();
        $base_url      = get_post_meta( $product_id, '_stockx_product_base_url', true );
        $slug          = trim( parse_url( $base_url, PHP_URL_PATH ), '/' );
        if ( ! $slug ) {
            WP_CLI::warning( "‚è≠Ô∏è No StockX base URL for product {$product_id}" );
            continue;
        }

        WP_CLI::log( "üì¶ Syncing WOMEN sizes for product {$product_id} (" . count( $variation_ids ) . " variations)" );

        foreach ( $variation_ids as $variation_id ) {
            $variation = wc_get_product( $variation_id );
            if ( ! $variation ) {
                continue;
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ backorder/preorder
            $is_preorder  = get_post_meta( $variation_id, '_is_preorder', true );
            $is_backorder = $variation->is_on_backorder();
            if ( ! $is_preorder && ! $is_backorder ) {
                WP_CLI::log( "‚è≠Ô∏è Variation {$variation_id} in stock, skipping." );
                continue;
            }

            // –ö—Ä–æ–∫ 1: –≤–∏—è–≤–ª—è—î–º–æ EU-—Ä–æ–∑–º—ñ—Ä
            $size = '';
            foreach ( $variation->get_variation_attributes() as $attr_key => $attr_val ) {
                if ( $attr_val && preg_match( '/^\d+([.,-]\d+)?$/', $attr_val ) ) {
                    $size = str_replace( [ ',', '-' ], '.', $attr_val );
                    break;
                }
            }
            if ( ! $size ) {
                WP_CLI::warning( "‚ö†Ô∏è Could not detect EU size for variation {$variation_id}, skipping." );
                continue;
            }

            // –ö—Ä–æ–∫ 2: –≥–æ—Ç—É—î–º–æ URL –∑ –∂—ñ–Ω–æ—á–∏–º US_W_Size
            $attribute_key = $client->guess_attribute_key( $slug );
            $raw_map       = $size_map[ $attribute_key ][ $size ] ?? [];
            // –±–µ—Ä–µ–º–æ US_W_Size, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ —Ñ–æ–ª–±–µ–∫ –Ω–∞ US Size —á–∏ –Ω–∞–≤—ñ—Ç—å EU
            $us_w = $raw_map['US_W_Size'] ?? ( $raw_map['US Size'] ?? $size );
            $us_w .= 'W';

            $full_url = sprintf(
                '%1$s?catchallFilters=%1$s&size=%2$s',
                $slug,
                rawurlencode( $us_w )
            );

            // –ö—Ä–æ–∫ 3: –æ—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –∑ StockX –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é $us_w
            try {
                WP_CLI::log( "üîç Getting price for variation {$variation_id} (EU: {$size}, US_W: {$us_w})" );
                $price = floatval( $client->get_price( $slug, $us_w ) );

                if ( ! $price ) {
                    WP_CLI::warning( "‚ö†Ô∏è No price for variation {$variation_id}" );
                    // –Ø–∫—â–æ —Ü—ñ–Ω–∏ –Ω–µ–º–∞—î ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞ —Å—Ç–∞–≤–∏–º–æ out-of-stock
                    $variation->set_price( '' );
                    $variation->set_regular_price( '' );
                    $variation->set_stock_status( 'outofstock' );
                    $variation->save();

                    WP_CLI::log( "‚õî Variation {$variation_id} set to out-of-stock (no price found)" );
                    continue;
                }

                $variation->set_price( $price );
                $variation->set_regular_price( $price );
                $variation->set_catalog_visibility( 'visible' );
                $variation->save();

                update_post_meta( $variation_id, '_stockx_product_url', $full_url );
                update_post_meta( $variation_id, '_stockx_price_synced_at', current_time( 'mysql' ) );
                $synced_at = get_post_meta( $variation_id, '_stockx_price_synced_at', true );
                if ( $synced_at ) {
                    echo "–¶—ñ–Ω–∞ –≤–∑—è—Ç–∞ –∑—ñ StockX (–æ—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: {$synced_at})";
                } else {
                    echo "–¶—ñ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É";
                }

                WP_CLI::log( "‚úÖ Price {$price} UAH set for variation {$variation_id}" );
                $processed++;

            } catch ( \Throwable $e ) {
                WP_CLI::warning( "‚ö†Ô∏è Variation {$variation_id} error: " . $e->getMessage() );
                continue;
            }

            // –Ω–µ–±–∞–≥–∞—Ç–æ –∑–∞—Ç—Ä–∏–º–∫–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ StockX
            $delay = rand( 5, 10 );
            WP_CLI::log( "‚è≥ Sleeping {$delay}s‚Ä¶" );
            sleep( $delay );
        }

        WP_CLI::success( "‚úÖ Finished product {$product_id}, {$processed} variations synced." );
    }
}



    /**
     * WP-CLI: Fetch all variation sizes & prices for a variable product
     *
     * @param array $args [0] => product_id
    */
    /**
     * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó, –≥–µ–Ω–µ—Ä—É—î URL, –¥—ñ—Å—Ç–∞—î —Ü—ñ–Ω—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î WooCommerce.
     */

    public function fetch_all_variations_sizes_prices( $product_id ) {
        $product = wc_get_product( $product_id );
        if ( ! $product || ! $product->is_type( 'variable' ) ) {
            $this->log( "‚ö†Ô∏è Product {$product_id} is not variable." );
            return;
        }

        // –ë–∞–∑–æ–≤–∏–π URL —ñ–∑ –ø—Ä–æ–¥—É–∫—Ç—É
        $base_url = get_post_meta( $product_id, '_stockx_product_base_url', true );
        if ( ! $base_url ) {
            $this->log( "‚ö†Ô∏è Missing base URL for product {$product_id}" );
            return;
        }
        $style    = trim( parse_url( $base_url, PHP_URL_PATH ), '/' );
        $is_women = get_post_meta( $product_id, '_stockx_is_women', true ) === 'yes';
        $maps     = require plugin_dir_path( __FILE__ ) . '/../admin/size-mappings.php';
        $attrKey  = $this->guess_attribute_key( $style );

        foreach ( $product->get_children() as $variation_id ) {
            $variation = wc_get_product( $variation_id );
            if ( ! $variation ) {
                $this->log( "‚ö†Ô∏è Variation {$variation_id} not found." );
                continue;
            }

        // –î–∏–Ω–∞–º—ñ—á–Ω–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è EU-—Ä–æ–∑–º—ñ—Ä—É —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –≤–∞—Ä—ñ–∞—Ü—ñ—ó
        $size = '';
        foreach ( $variation->get_variation_attributes() as $attr_key => $attr_val ) {
            if ( ! $attr_val ) {
                continue;
            }
            // –ú—ñ–Ω—è—î–º–æ –¥–µ—Ñ—ñ—Å —ñ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É
            $candidate = str_replace( [ ',', '-' ], [ '.', '.' ], $attr_val );
            // –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ –∞–±–æ —á–∏—Å–ª–æ –∑ –∫—Ä–∞–ø–∫–æ—é
            if ( preg_match( '/^\d+(\.\d+)?$/', $candidate ) ) {
                $size = $candidate;
                break;
            }
        }
        if ( ! $size ) {
            $this->log( "Skipping variation {$variation_id} ‚Äì could not detect EU size" );
            continue;
        }


            // Map EU ‚Üí US —Ç–∞ –¥–æ–¥–∞—Ç–∏ "W" —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            $raw = $maps[ $attrKey ][ $size ] ?? null;
            $us  = $raw['US Size'] ?? $size;
            if ( $is_women && strpos( $us, 'W' ) === false ) {
                $us .= 'W';
            }

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫—ñ–Ω—Ü–µ–≤–∏–π URL
            $size_param    = rawurlencode( $us );
            $variation_url = sprintf(
                '%1$s?catchallFilters=%1$s&size=%2$s',
                $base_url,
                $size_param
            );

            // –õ–æ–≥ URL (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)
            $this->log( "Final URL: {$variation_url}" );

            // –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
            $price = floatval( $this->get_price( $style, $us ) );
            if ( $price !== null ) {
                $variation->set_price( $price );
                $variation->set_regular_price( $price );
                $variation->set_catalog_visibility( 'visible' );
                $variation->save();

                $this->log( "‚úÖ Price ‚Ç¥{$price} set for variation {$variation_id}" );
            } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ü—ñ–Ω–∏ ‚Äî —Ö–æ–≤–∞—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é
                $variation->set_price( '' );
                $variation->set_regular_price( '' );
                $variation->set_catalog_visibility( 'hidden' );
                $variation->save();

                $this->log( "‚ö†Ô∏è No price for variation {$variation_id}, hidden" );
            }
        }
    }

    public static function cli_fetch_all_variations( $args ) {
        $pid = absint( $args[0] ?? 0 );
        if ( ! $pid ) {
            WP_CLI::error( 'Please provide a valid product ID.' );
        }

        $product = wc_get_product( $pid );
        if ( ! $product || ! $product->is_type( 'variable' ) ) {
            WP_CLI::error( "Product {$pid} is not a variable product." );
        }

        WP_CLI::log( "üîÑ Starting fetch_all_variations_sizes_prices for product {$pid}" );
        $client = new SeleniumClient();
        $client->fetch_all_variations_sizes_prices( $pid );
        WP_CLI::success( "‚úÖ Done fetching variations for product {$pid}" );
    }

public static function check_women_checkbox( $args, $assoc_args ) {
    $meta_key = 'women_w_checkbox'; // –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π meta_key

    // –ó–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ WP_Query —á–µ—Ä–µ–∑ —Å–ª–µ—à
    $query = new \WP_Query([
        'post_type'      => 'product',
        'post_status'    => 'publish',
        'posts_per_page' => -1,
        'fields'         => 'ids',
    ]);

    if ( empty( $query->posts ) ) {
        WP_CLI::success( "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É." );
        return;
    }

    foreach ( $query->posts as $product_id ) {
        $has = get_post_meta( $product_id, $meta_key, true );
        if ( $has ) {
            WP_CLI::log( "‚úÖ Product ID {$product_id} ‚Äî –º–∞—î —á–µ–∫–±–æ–∫—Å Women W" );
        } else {
            WP_CLI::warning( "‚ùå Product ID {$product_id} ‚Äî –ù–ï –º–∞—î —á–µ–∫–±–æ–∫—Å—É Women W" );
        }
    }

    WP_CLI::success( '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' );
}
}